{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"/Users/gyucheonheo/Documents/parkpay/pages/orders.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from '../components/MyLayout';\nimport fetch from 'isomorphic-unfetch';\n\nvar Order = function Order(props) {\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 5\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6\n    },\n    __self: this\n  }, \"Orders\"), __jsx(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }, props.orders ? props.orders.map(function (order) {\n    return __jsx(\"li\", {\n      key: order.oid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10\n      },\n      __self: this\n    }, __jsx(Link, {\n      href: \"/orders/[id]\",\n      as: \"/p/\".concat(order.nid),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12\n      },\n      __self: this\n    }, order.oid)));\n  }) : \"No order yet\"), __jsx(Note, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }));\n};\n\nOrder.getInitialProps = function _callee(context) {\n  var id, res, orders;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          id = context.query.id;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(fetch(\"http://localhost:8080/parkpay/orders\"));\n\n        case 3:\n          res = _context.sent;\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 6:\n          orders = _context.sent;\n          return _context.abrupt(\"return\", {\n            orders: orders\n          });\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default Orders;","map":{"version":3,"sources":["/Users/gyucheonheo/Documents/parkpay/pages/orders.js"],"names":["Layout","fetch","Order","props","orders","map","order","oid","nid","getInitialProps","context","id","query","res","json","Orders"],"mappings":";;;;AAAA,OAAOA,MAAP,MAAmB,wBAAnB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAAAC,KAAK;AAAA,SACjB,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKA,KAAK,CAACC,MAAN,GACGD,KAAK,CAACC,MAAN,CAAaC,GAAb,CAAiB,UAAAC,KAAK;AAAA,WAClB;AAAI,MAAA,GAAG,EAAEA,KAAK,CAACC,GAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC,cAAX;AAA0B,MAAA,EAAE,eAAQD,KAAK,CAACE,GAAd,CAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIF,KAAK,CAACC,GAAV,CADJ,CADJ,CADkB;AAAA,GAAtB,CADH,GASG,cAVR,CAFF,EAeE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAfF,CADiB;AAAA,CAAnB;;AAoBAL,KAAK,CAACO,eAAN,GAAwB,iBAAeC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACdC,UAAAA,EADc,GACPD,OAAO,CAACE,KADD,CACdD,EADc;AAAA;AAAA,2CAEJV,KAAK,wCAFD;;AAAA;AAEhBY,UAAAA,GAFgB;AAAA;AAAA,2CAGDA,GAAG,CAACC,IAAJ,EAHC;;AAAA;AAGhBV,UAAAA,MAHgB;AAAA,2CAKf;AAAEA,YAAAA,MAAM,EAANA;AAAF,WALe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB;;AAQA,eAAeW,MAAf","sourcesContent":["import Layout from '../components/MyLayout';\nimport fetch from 'isomorphic-unfetch';\n\nconst Order = props => (\n  <Layout>\n    <h1>Orders</h1>\n    <ul>\n        {props.orders ? \n            props.orders.map(order => (\n                <li key={order.oid}>\n                    <Link href=\"/orders/[id]\" as={`/p/${order.nid}`}>\n                        <a>{order.oid}</a>\n                    </Link>\n                </li>\n            ))\n            :\n            \"No order yet\"\n        }\n    </ul>\n    <Note />\n  </Layout>\n);\n\nOrder.getInitialProps = async function(context) {\n  const { id } = context.query;\n  const res = await fetch(`http://localhost:8080/parkpay/orders`);\n  const orders = await res.json();\n\n  return { orders };\n};\n\nexport default Orders;"]},"metadata":{},"sourceType":"module"}