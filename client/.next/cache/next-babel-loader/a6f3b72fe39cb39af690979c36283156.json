{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"/Users/gyucheonheo/Documents/parkpay/pages/parks/notes/[id].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport fetch from 'isomorphic-unfetch';\n\nvar Note = function Note(props) {\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 4\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 5\n    },\n    __self: this\n  }, \" Notes \"), __jsx(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6\n    },\n    __self: this\n  }, props.notes ? props.notes.map(function (note) {\n    return __jsx(\"li\", {\n      key: note.nid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 8\n      },\n      __self: this\n    }, __jsx(Link, {\n      href: \"/notes/[id]\",\n      as: \"/notes/\".concat(note.nid),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 9\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10\n      },\n      __self: this\n    }, note.title)));\n  }) : \"No note for park\"));\n};\n\nNote.getInitialProps = function _callee(context) {\n  var id, res, notes;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          id = context.query.id;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(fetch(\"http://localhost:8080/parkpay/parks/\".concat(id, \"/notes\")));\n\n        case 3:\n          res = _context.sent;\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 6:\n          notes = _context.sent;\n          return _context.abrupt(\"return\", {\n            notes: notes\n          });\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default Note;","map":{"version":3,"sources":["/Users/gyucheonheo/Documents/parkpay/pages/parks/notes/[id].js"],"names":["fetch","Note","props","notes","map","note","nid","title","getInitialProps","context","id","query","res","json"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,oBAAlB;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAAAC,KAAK;AAAA,SACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,KAAK,CAACC,KAAN,GAAcD,KAAK,CAACC,KAAN,CAAYC,GAAZ,CAAgB,UAAAC,IAAI;AAAA,WACjC;AAAI,MAAA,GAAG,EAAEA,IAAI,CAACC,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC,aAAX;AAAyB,MAAA,EAAE,mBAAYD,IAAI,CAACC,GAAjB,CAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAID,IAAI,CAACE,KAAT,CADF,CADF,CADiC;AAAA,GAApB,CAAd,GAOD,kBARF,CAFF,CADc;AAAA,CAAlB;;AAgBAN,IAAI,CAACO,eAAL,GAAuB,iBAAeC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACfC,UAAAA,EADe,GACRD,OAAO,CAACE,KADA,CACfD,EADe;AAAA;AAAA,2CAELV,KAAK,+CAAwCU,EAAxC,YAFA;;AAAA;AAEjBE,UAAAA,GAFiB;AAAA;AAAA,2CAGHA,GAAG,CAACC,IAAJ,EAHG;;AAAA;AAGjBV,UAAAA,KAHiB;AAAA,2CAKhB;AAAEA,YAAAA,KAAK,EAALA;AAAF,WALgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB;;AAQA,eAAeF,IAAf","sourcesContent":["import fetch from 'isomorphic-unfetch';\n\nconst Note = props => (\n    <div>\n      <h1> Notes </h1>\n      <ul>\n        {props.notes ? props.notes.map(note => (\n          <li key={note.nid}>\n            <Link href=\"/notes/[id]\" as={`/notes/${note.nid}`}>\n              <a>{note.title}</a>\n            </Link>\n          </li>\n        )) : \n        \"No note for park\"}\n      </ul>\n    </div>\n  )\n\nNote.getInitialProps = async function(context) {\nconst { id } = context.query;\nconst res = await fetch(`http://localhost:8080/parkpay/parks/${id}/notes`);\nconst notes = await res.json();\n\nreturn { notes };\n}\n\nexport default Note;"]},"metadata":{},"sourceType":"module"}