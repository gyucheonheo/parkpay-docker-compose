{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"/Users/gyucheonheo/Documents/parkpay/pages/parks/[id].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from '../../components/MyLayout';\nimport fetch from 'isomorphic-unfetch';\n\nvar Post = function Post(props) {\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 5\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6\n    },\n    __self: this\n  }, props.park.location_info.name), __jsx(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }, __jsx(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, props.park.location_info.region), __jsx(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, props.park.location_info.address), __jsx(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, props.park.location_info.web)));\n};\n\nvar Note = function Note(props) {\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, \" Notes \"), __jsx(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, props.notes.map(function (note) {\n    return __jsx(\"li\", {\n      key: note.nid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, note.title);\n  })));\n};\n\nNote.getInitialProps = function _callee(context) {\n  var id, res, notes;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          id = context.query.id;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(fetch(\"http://localhost:8080/parkpay/parks/\".concat(id)));\n\n        case 3:\n          res = _context.sent;\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 6:\n          notes = _context.sent;\n          return _context.abrupt(\"return\", {\n            notes: notes\n          });\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nPost.getInitialProps = function _callee2(context) {\n  var id, res, park;\n  return _regeneratorRuntime.async(function _callee2$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          id = context.query.id;\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(fetch(\"http://localhost:8080/parkpay/parks/\".concat(id)));\n\n        case 3:\n          res = _context2.sent;\n          _context2.next = 6;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 6:\n          park = _context2.sent;\n          return _context2.abrupt(\"return\", {\n            park: park\n          });\n\n        case 8:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default Post;","map":{"version":3,"sources":["/Users/gyucheonheo/Documents/parkpay/pages/parks/[id].js"],"names":["Layout","fetch","Post","props","park","location_info","name","region","address","web","Note","notes","map","note","nid","title","getInitialProps","context","id","query","res","json"],"mappings":";;;;AAAA,OAAOA,MAAP,MAAmB,2BAAnB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAAAC,KAAK;AAAA,SAChB,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKA,KAAK,CAACC,IAAN,CAAWC,aAAX,CAAyBC,IAA9B,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKH,KAAK,CAACC,IAAN,CAAWC,aAAX,CAAyBE,MAA9B,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKJ,KAAK,CAACC,IAAN,CAAWC,aAAX,CAAyBG,OAA9B,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKL,KAAK,CAACC,IAAN,CAAWC,aAAX,CAAyBI,GAA9B,CAHF,CAFF,CADgB;AAAA,CAAlB;;AAWA,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAAAP,KAAK;AAAA,SAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,KAAK,CAACQ,KAAN,CAAYC,GAAZ,CAAgB,UAAAC,IAAI;AAAA,WACnB;AAAI,MAAA,GAAG,EAAEA,IAAI,CAACC,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGD,IAAI,CAACE,KADR,CADmB;AAAA,GAApB,CADH,CAFF,CADgB;AAAA,CAAlB;;AAaAL,IAAI,CAACM,eAAL,GAAuB,iBAAeC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACbC,UAAAA,EADa,GACND,OAAO,CAACE,KADF,CACbD,EADa;AAAA;AAAA,2CAEHjB,KAAK,+CAAwCiB,EAAxC,EAFF;;AAAA;AAEfE,UAAAA,GAFe;AAAA;AAAA,2CAGDA,GAAG,CAACC,IAAJ,EAHC;;AAAA;AAGfV,UAAAA,KAHe;AAAA,2CAKd;AAAEA,YAAAA,KAAK,EAALA;AAAF,WALc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB;;AAOAT,IAAI,CAACc,eAAL,GAAuB,kBAAeC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACbC,UAAAA,EADa,GACND,OAAO,CAACE,KADF,CACbD,EADa;AAAA;AAAA,2CAEHjB,KAAK,+CAAwCiB,EAAxC,EAFF;;AAAA;AAEfE,UAAAA,GAFe;AAAA;AAAA,2CAGFA,GAAG,CAACC,IAAJ,EAHE;;AAAA;AAGfjB,UAAAA,IAHe;AAAA,4CAKd;AAAEA,YAAAA,IAAI,EAAJA;AAAF,WALc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB;;AAQA,eAAeF,IAAf","sourcesContent":["import Layout from '../../components/MyLayout';\nimport fetch from 'isomorphic-unfetch';\n\nconst Post = props => (\n  <Layout>\n    <h1>{props.park.location_info.name}</h1>\n    <ul>\n      <li>{props.park.location_info.region}</li>\n      <li>{props.park.location_info.address}</li>     \n      <li>{props.park.location_info.web}</li> \n    </ul>\n  </Layout>\n);\n\nconst Note = props => (\n  <div>\n    <h1> Notes </h1>\n    <ul>\n      {props.notes.map(note => (\n        <li key={note.nid}>\n          {note.title}   \n        </li>\n      ))}\n    </ul>\n  </div>\n)\n\nNote.getInitialProps = async function(context) {\n  const { id } = context.query;\n  const res = await fetch(`http://localhost:8080/parkpay/parks/${id}`);\n  const notes = await res.json();\n\n  return { notes };\n}\nPost.getInitialProps = async function(context) {\n  const { id } = context.query;\n  const res = await fetch(`http://localhost:8080/parkpay/parks/${id}`);\n  const park = await res.json();\n\n  return { park };\n};\n\nexport default Post;"]},"metadata":{},"sourceType":"module"}